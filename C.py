# C.py

from Alex_Lobrano_implementation import *

filename = time.strftime("%Y%m%d-%H%M%S")
sys.stdout = open(filename + '.txt', 'w')

total_users = 3								# Users for the scenario
user_pks = []								# Create list of public keys of users
key_dict = {}								# Create dictionary for key pairs. Dictionary keys are pk, values are sk
bank = {}									# Create dictionary for bank. Dictionary keys are pk, values are coins in account

# hardcoded = [(13281310054460396188358823510902093259883930848501257339549719515159467176827991004659624544985959490721499400409693406293953737683048770954620124130846929409518470257772567858472421688796271114776141057181948727959776770767597954426266902501415374564030185870143937292191628923535577701117789072408621351072508096471108480085508535678447018050524860398119668440453025596320984405137454542053044632841295360852413904886927959747804588446796500549307266988138753456122751392196033086286032941988347253805906875527369023949018928942398849104926340777643190531394909109573871052343831750876935203771219236805287225010921L, (19625301651662850402344408922099124895091782303032279855828179294881642704850905530231767592199780693862169443670429390228309830773933625831918567089856765736749455046644312600691397019410538482531301001825047437817709466991164092018159488763662848138846565714110491307094823733535889807774560606170271884550755385650153650683767207576204333693668546326660466697237618148008678522469349568758101477196113881006267411977842026303258392150931417461403491344179216287056898963883586372743466714184526472538007541966061016834872307978898551307735517252267347421177727453327043802098212340950422005220325834953306886085879L, 10600850086265361703453154282676694162425568544513751764926829052798790248989638786721978887210099307917313508191971986360783823647256959864502128786777958233828903922124337014565095928956159675217844324022419958142701925025258106283262078339278817318486085204273815351419201946194179324259324050771537347622362064003802476907067530704503347530573602938243564878875777382358653615658121600435354334401670091377477056381036875700576519217976762622274612770942746050060943033924146638762862084850151270951262654501179265333750809402865440749176283736031662194621097621803144676379910112282935519663972219245806552337561L)), 
# (14538744759097377001969408181809135188030182231034937848175515308209732825159332961186268295780025195288150405969577487327579782740329675786711701655274729603816533274634127383809430544466747564038215727202229045780788777028005332388195036547702930469268079618274996043613319719261724732701989725508808649190076558305794261592193730082818413458446011205995226306014173867796582851745302080453396310786865500544850612611899207561030855473732345854609401818336712323756411135529492059331583467548301999608738917340547196899552189293119434033050770411027918315204338385899250875043456933553564826546069416851759842771277L, (19871618071290754032188333824948647373655655797968522612388625137931200834506340857947415223861029699228862809240702808183711675994512687271624462079177687946164986199844785376164908785000805411143536676708905304097674226672558259185142431380260766981975393204238454377437560144390981331741961318170912911163513582417276336261536749314760365641007896793271832720368784679204763435556881843545161537186848482295616472863315738075731372580962238800301377263149629137718666931104377214530085854210015406735570961006620679276664386915636428168994165615510743048363326925153659135224369210882065025814600126241543358189261L, 2184169828747081289570086288964218141521760169766072417039918529492356773744860771162194635257245445105567841276497177089115153622959756447389387427077028626612160933517057620550968771888232430984879636771174529264054374250718377355765287619530536862934000320111466978542612951314941485880141235500165900411681943408314425266975210309928523911414055953252520176762602297872675685220046798232534785782497529634090482792860606145822637211306671648230335181645491712534151813130032741415906751749935095364673149931259080182642677501176529031266066922694429760480357418416073513584648722779635747309891206923309219328213L)), 
# (19661502660462288153592021604236684510357385709385868672418067121608656071321038282122269546675864329215359557149355595660554657026390615287909523115970090384227552291345345201363150594803817288895115121736454138017454000909345626910627867035241345399870616747756870535474568151635188287319797829901390194403807950349077764445193008673781612165302636787567153309671133149157539186046730818215440336753797638883632612364844439200155691276238493108065276026952184296020002874063407713689386194481432766368385741528805898008020560394122288181138731732782331527230970925868407063710179056899720711190857915595798389009931L, (19685447669643380256891109590492485110081459662117061282528816693448862331397342122900923102792516677862756002892777244491488984320279769643043583595470105293930762500434186064765069400591752014980071761027086991895196808247433977897748769738689274260124837141413299920071109283742455608750624627154444353962058154721949525293185218079526640020980349861381261376368645290179145230459416908631608097492280603678848139142818785818450924166936372661558201914361929618019312733805254314568338664157875108808808631697543162864625022495707173460819153693496991647353439969179958644373169913233736695589942015488548976468429L, 2395804783170394689624957974896309976779385510741016829999226239059941027701129887808629140261529206093203834396388451242519344635399417427283441381790873510547350254425923891931409599978649315348371126650512406398503926516651212643200646413248011952272238782681386163262508633664982689440893317939592408977893515176211386720648270255295654847443945397415333656436451060492759496996624790930511493562132100074013947679530444677686337616708969262149365242780690464543014284054458167242714554119137903207047359575463684317773255673865395054925905382007676126154025646714276074683396069167960077141985965586095468857251L))]
	
# for i in range(total_users):
	# sk, pk = (hardcoded[i][0], hardcoded[i][1])
	# user_pks.append(pk)
	# key_dict[pk] = sk
	# bank[pk] = []
	
for i in range(total_users):
	sk, pk = create_user()
	user_pks.append(pk)
	key_dict[pk] = sk
	bank[pk] = []

print "Initializing transaction queue"
tq = init_transaction_queue()

print "Initializing ledger\n"
ledger = [init_ledger(key_dict[user_pks[0]], user_pks[0], bank, tq)]

# User 0 should have 10 coins (from genesis block mint)
# User 1 should have 0 coins
# User 2 should have 0 coins
print "Balance of user 0:", check_balance(user_pks[0], bank)
print "Balance of user 1:", check_balance(user_pks[1], bank)
print "Balance of user 2:", check_balance(user_pks[2], bank), "\n"

# User 0 creates a transaction to send 2 coins to user 1
print "Creating transaction from user 0 to user 1"
send_coins = bank[user_pks[0]][0:2]
transaction = gen_transaction(user_pks[0], key_dict[user_pks[0]], user_pks[1], send_coins, bank, tq, True)

# User 2 generates a block using the previous transaction
print "Generating block by user 2"
block = gen_block(len(ledger), key_dict[user_pks[2]], user_pks[2], tq, 1, bank, ledger[-1], 5)
if(ver_block(len(ledger), block, tq, bank, ledger, 5)): 
	print "Adding block to ledger\n"
	ledger.append(block)

# User 0 should have 8 coins 
# User 1 should have 2 coins
# User 2 should have 10 coins
print "Balance of user 0:", check_balance(user_pks[0], bank)
print "Balance of user 1:", check_balance(user_pks[1], bank)
print "Balance of user 2:", check_balance(user_pks[2], bank), "\n"
	
# User 0 creates a transaction to send 3 coins to user 1
# User 2 creates a transaction to send 4 coins to user 0
# User 2 creates a transaction to send the same 4 coins to user 1
print "Creating transaction from user 0 to user 1"
send_coins = bank[user_pks[0]][0:3]
transaction = gen_transaction(user_pks[0], key_dict[user_pks[0]], user_pks[1], send_coins, bank, tq, True)
print "Creating transaction from user 2 to user 0"
send_coins = bank[user_pks[2]][0:4]
transaction = gen_transaction(user_pks[2], key_dict[user_pks[2]], user_pks[0], send_coins, bank, tq, True)
print "Creating transaction from user 2 to user 1"
send_coins = bank[user_pks[2]][0:4]
transaction = gen_transaction(user_pks[2], key_dict[user_pks[2]], user_pks[1], send_coins, bank, tq, True)

# User 1 generates a block using the previous 3 transactions
print "Generating block by user 1"
block = gen_block(len(ledger), key_dict[user_pks[1]], user_pks[1], tq, 3, bank, ledger[-1], 5)
if(ver_block(len(ledger), block, tq, bank, ledger, 5)): 
	print "Adding block to ledger\n"
	ledger.append(block)

# User 0 should still have 8 coins
# User 1 should still have 2 coins
# User 2 should still have 10 coins
print "Balance of user 0:", check_balance(user_pks[0], bank)
print "Balance of user 1:", check_balance(user_pks[1], bank)
print "Balance of user 2:", check_balance(user_pks[2], bank), "\n"

# User 1 generates a block using the 2 valid transactions which were added back
print "Generating block by user 1"
block = gen_block(len(ledger), key_dict[user_pks[1]], user_pks[1], tq, 3, bank, ledger[-1], 5)
if(ver_block(len(ledger), block, tq, bank, ledger, 5)): 
	print "Adding block to ledger\n"
	ledger.append(block)

# User 0 should now have 9 coins
# User 1 should now have 15 coins
# User 2 should now have 6 coins
print "Balance of user 0:", check_balance(user_pks[0], bank)
print "Balance of user 1:", check_balance(user_pks[1], bank)
print "Balance of user 2:", check_balance(user_pks[2], bank), "\n"